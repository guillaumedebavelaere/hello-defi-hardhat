{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21ce1decb43116df5a5711cb1327a321d539299463c619bee2ebf931ca498e74",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "192757",
    "logsBloom": "0x
    "blockHash": "0x327d82152eac1ed432ecfb4cd30215a0e044cf86c60ac8b2778c02b3b45a35ec",
    "transactionHash": "0x21ce1decb43116df5a5711cb1327a321d539299463c619bee2ebf931ca498e74",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "192757",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f9b6f202c6d59bb47ecdd333bf2aae0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256,address,uint16)\":{\"details\":\"Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User deposits 100 USDC and gets in return 100 aUSDC\",\"params\":{\"amount\":\"The amount to be deposited\",\"asset\":\"The address of the underlying asset to deposit\",\"onBehalfOf\":\"The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet\",\"referralCode\":\"Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*\"}},\"withdraw(address,uint256,address)\":{\"details\":\"Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\",\"params\":{\"amount\":\"The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance\",\"asset\":\"The address of the underlying asset to withdraw\",\"to\":\"Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet\"},\"returns\":{\"_0\":\"The final amount withdrawn*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tests/MockLendingPoolAAVE2.sol\":\"MockLendingPoolAAVE2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ILendingPoolAAVE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * This interface exposes AAVE2 ILendingPool methods.\\n * This has been created instead of imported from aave/protocols-v2 package because of the old version of solidity.\\n */\\ninterface ILendingPoolAAVE2 {\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\",\"keccak256\":\"0xe542dbd643e7b4c6ca609f72cb1a264b80634fb2f80c9d7df1ae5eb9aba1054f\",\"license\":\"MIT\"},\"contracts/tests/MockLendingPoolAAVE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../ILendingPoolAAVE2.sol\\\";\\n\\ncontract MockLendingPoolAAVE2 is ILendingPoolAAVE2 {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external override {\\n        // nothing to do, it is just a mock\\n    }\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external override returns (uint256) {\\n        // nothing to do, it is just a mock\\n        return 1;\\n    }\\n}\",\"keccak256\":\"0xdb6678abfeebb7c0c85efc59e598ca796ae61bc54c71eb0fa302fe18b1760662\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610287806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806369328dec1461003b578063e8eda9df1461006b575b600080fd5b61005560048036038101906100509190610133565b610087565b6040516100629190610195565b60405180910390f35b610085600480360381019061008091906101ea565b610094565b005b6000600190509392505050565b50505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ca8261009f565b9050919050565b6100da816100bf565b81146100e557600080fd5b50565b6000813590506100f7816100d1565b92915050565b6000819050919050565b610110816100fd565b811461011b57600080fd5b50565b60008135905061012d81610107565b92915050565b60008060006060848603121561014c5761014b61009a565b5b600061015a868287016100e8565b935050602061016b8682870161011e565b925050604061017c868287016100e8565b9150509250925092565b61018f816100fd565b82525050565b60006020820190506101aa6000830184610186565b92915050565b600061ffff82169050919050565b6101c7816101b0565b81146101d257600080fd5b50565b6000813590506101e4816101be565b92915050565b600080600080608085870312156102045761020361009a565b5b6000610212878288016100e8565b94505060206102238782880161011e565b9350506040610234878288016100e8565b9250506060610245878288016101d5565b9150509295919450925056fea2646970667358221220af7ae024b56a197d38d42a39384d3e44ea992e4204efb5dc43220e7c6c29ccc564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806369328dec1461003b578063e8eda9df1461006b575b600080fd5b61005560048036038101906100509190610133565b610087565b6040516100629190610195565b60405180910390f35b610085600480360381019061008091906101ea565b610094565b005b6000600190509392505050565b50505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ca8261009f565b9050919050565b6100da816100bf565b81146100e557600080fd5b50565b6000813590506100f7816100d1565b92915050565b6000819050919050565b610110816100fd565b811461011b57600080fd5b50565b60008135905061012d81610107565b92915050565b60008060006060848603121561014c5761014b61009a565b5b600061015a868287016100e8565b935050602061016b8682870161011e565b925050604061017c868287016100e8565b9150509250925092565b61018f816100fd565b82525050565b60006020820190506101aa6000830184610186565b92915050565b600061ffff82169050919050565b6101c7816101b0565b81146101d257600080fd5b50565b6000813590506101e4816101be565b92915050565b600080600080608085870312156102045761020361009a565b5b6000610212878288016100e8565b94505060206102238782880161011e565b9350506040610234878288016100e8565b9250506060610245878288016101d5565b9150509295919450925056fea2646970667358221220af7ae024b56a197d38d42a39384d3e44ea992e4204efb5dc43220e7c6c29ccc564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256,address,uint16)": {
        "details": "Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User deposits 100 USDC and gets in return 100 aUSDC",
        "params": {
          "amount": "The amount to be deposited",
          "asset": "The address of the underlying asset to deposit",
          "onBehalfOf": "The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet",
          "referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*"
        }
      },
      "withdraw(address,uint256,address)": {
        "details": "Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC",
        "params": {
          "amount": "The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance",
          "asset": "The address of the underlying asset to withdraw",
          "to": "Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet"
        },
        "returns": {
          "_0": "The final amount withdrawn*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}