{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregatorAddressDai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aggregatorAddressLink",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x268e5a4f9f15a8879ca0cb632788e65207c26c53a7bb10a80c6d37e6ac931898",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "569511",
    "logsBloom": "0x
    "blockHash": "0xa73cc73370eed3ddec52c975de689a52b58e04dbb51fb460694b8a42bebe66ec",
    "transactionHash": "0x268e5a4f9f15a8879ca0cb632788e65207c26c53a7bb10a80c6d37e6ac931898",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "569511",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "74d66a33bb47b3b984a719ae0edd406a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorAddressDai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregatorAddressLink\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice(address)\":{\"notice\":\"Returns the latest price\"}},\"notice\":\"For now it supports manual added asset because feed registry (https://docs.chain.link/data-feeds/feed-registry) is not available on testnet. TODO: handle multiple assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceFeedConsumer.sol\":\"PriceFeedConsumer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/PriceFeedConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\ninterface IPriceFeedConsumer {\\n    function getLatestPrice(address _asset) external view returns (uint256);\\n}\\n\\n/**\\n * For now it supports manual added asset because feed registry (https://docs.chain.link/data-feeds/feed-registry)\\n * is not available on testnet.\\n * TODO: handle multiple assets\\n */\\ncontract PriceFeedConsumer is IPriceFeedConsumer {\\n    AggregatorV3Interface internal priceFeedDai;\\n    AggregatorV3Interface internal priceFeedLink;\\n\\n    constructor(address _aggregatorAddressDai, address _aggregatorAddressLink) {\\n        priceFeedDai = AggregatorV3Interface(_aggregatorAddressDai);\\n        priceFeedLink = AggregatorV3Interface(_aggregatorAddressLink);\\n    }\\n\\n    /**\\n     * Returns the latest price\\n     */\\n    function getLatestPrice(address _asset) override public view returns (uint256) {\\n        AggregatorV3Interface priceFeed = priceFeedDai;\\n        if (_asset == address(0x75Ab5AB1Eef154C0352Fc31D2428Cef80C7F8B33)) {\\n            priceFeed = priceFeedDai;\\n        } else {\\n            priceFeed = priceFeedLink;\\n        }\\n        \\n        (\\n            ,\\n            int256 price,\\n            ,\\n            ,\\n        ) = priceFeed.latestRoundData();\\n        if (priceFeed.decimals() < IERC20Metadata(_asset).decimals()) {\\n            uint256 decimalsToAdd = 10**IERC20Metadata(_asset).decimals() / 10**priceFeed.decimals();\\n            return uint256(price) * decimalsToAdd;\\n        }\\n        return uint256(price);\\n    }\\n}\",\"keccak256\":\"0x9d06589d7f483a1c6625487b522a6873559f1bdeaefeb4382382de0429f0dccb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109db3803806109db8339818101604052810190610032919061011d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b60008060408385031215610134576101336100ba565b5b600061014285828601610108565b925050602061015385828601610108565b9150509250929050565b61086f8061016c6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806316345f1814610030575b600080fd5b61004a60048036038101906100459190610404565b610060565b604051610057919061044a565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690507375ab5ab1eef154c0352fc31d2428cef80c7f8b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036100f55760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061011b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018c9190610509565b5050509150508373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020191906105bd565b60ff168273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561024f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027391906105bd565b60ff1610156103965760008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ed91906105bd565b600a6102f9919061074c565b8573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036891906105bd565b600a610374919061074c565b61037e91906107c6565b9050808261038c91906107f7565b935050505061039c565b80925050505b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103d1826103a6565b9050919050565b6103e1816103c6565b81146103ec57600080fd5b50565b6000813590506103fe816103d8565b92915050565b60006020828403121561041a576104196103a1565b5b6000610428848285016103ef565b91505092915050565b6000819050919050565b61044481610431565b82525050565b600060208201905061045f600083018461043b565b92915050565b600069ffffffffffffffffffff82169050919050565b61048481610465565b811461048f57600080fd5b50565b6000815190506104a18161047b565b92915050565b6000819050919050565b6104ba816104a7565b81146104c557600080fd5b50565b6000815190506104d7816104b1565b92915050565b6104e681610431565b81146104f157600080fd5b50565b600081519050610503816104dd565b92915050565b600080600080600060a08688031215610525576105246103a1565b5b600061053388828901610492565b9550506020610544888289016104c8565b9450506040610555888289016104f4565b9350506060610566888289016104f4565b925050608061057788828901610492565b9150509295509295909350565b600060ff82169050919050565b61059a81610584565b81146105a557600080fd5b50565b6000815190506105b781610591565b92915050565b6000602082840312156105d3576105d26103a1565b5b60006105e1848285016105a8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156106705780860481111561064c5761064b6105ea565b5b600185161561065b5780820291505b808102905061066985610619565b9450610630565b94509492505050565b6000826106895760019050610745565b816106975760009050610745565b81600181146106ad57600281146106b7576106e6565b6001915050610745565b60ff8411156106c9576106c86105ea565b5b8360020a9150848211156106e0576106df6105ea565b5b50610745565b5060208310610133831016604e8410600b841016171561071b5782820a905083811115610716576107156105ea565b5b610745565b6107288484846001610626565b9250905081840481111561073f5761073e6105ea565b5b81810290505b9392505050565b600061075782610431565b915061076283610584565b925061078f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610679565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006107d182610431565b91506107dc83610431565b9250826107ec576107eb610797565b5b828204905092915050565b600061080282610431565b915061080d83610431565b925082820261081b81610431565b91508282048414831517610832576108316105ea565b5b509291505056fea2646970667358221220fe06a2d0182ce5e8f71191f6e7140ac8f613b6ff93dd9c336bbd6bf8df0aaa5064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806316345f1814610030575b600080fd5b61004a60048036038101906100459190610404565b610060565b604051610057919061044a565b60405180910390f35b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690507375ab5ab1eef154c0352fc31d2428cef80c7f8b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036100f55760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061011b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018c9190610509565b5050509150508373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020191906105bd565b60ff168273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561024f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027391906105bd565b60ff1610156103965760008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ed91906105bd565b600a6102f9919061074c565b8573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036891906105bd565b600a610374919061074c565b61037e91906107c6565b9050808261038c91906107f7565b935050505061039c565b80925050505b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103d1826103a6565b9050919050565b6103e1816103c6565b81146103ec57600080fd5b50565b6000813590506103fe816103d8565b92915050565b60006020828403121561041a576104196103a1565b5b6000610428848285016103ef565b91505092915050565b6000819050919050565b61044481610431565b82525050565b600060208201905061045f600083018461043b565b92915050565b600069ffffffffffffffffffff82169050919050565b61048481610465565b811461048f57600080fd5b50565b6000815190506104a18161047b565b92915050565b6000819050919050565b6104ba816104a7565b81146104c557600080fd5b50565b6000815190506104d7816104b1565b92915050565b6104e681610431565b81146104f157600080fd5b50565b600081519050610503816104dd565b92915050565b600080600080600060a08688031215610525576105246103a1565b5b600061053388828901610492565b9550506020610544888289016104c8565b9450506040610555888289016104f4565b9350506060610566888289016104f4565b925050608061057788828901610492565b9150509295509295909350565b600060ff82169050919050565b61059a81610584565b81146105a557600080fd5b50565b6000815190506105b781610591565b92915050565b6000602082840312156105d3576105d26103a1565b5b60006105e1848285016105a8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156106705780860481111561064c5761064b6105ea565b5b600185161561065b5780820291505b808102905061066985610619565b9450610630565b94509492505050565b6000826106895760019050610745565b816106975760009050610745565b81600181146106ad57600281146106b7576106e6565b6001915050610745565b60ff8411156106c9576106c86105ea565b5b8360020a9150848211156106e0576106df6105ea565b5b50610745565b5060208310610133831016604e8410600b841016171561071b5782820a905083811115610716576107156105ea565b5b610745565b6107288484846001610626565b9250905081840481111561073f5761073e6105ea565b5b81810290505b9392505050565b600061075782610431565b915061076283610584565b925061078f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610679565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006107d182610431565b91506107dc83610431565b9250826107ec576107eb610797565b5b828204905092915050565b600061080282610431565b915061080d83610431565b925082820261081b81610431565b91508282048414831517610832576108316105ea565b5b509291505056fea2646970667358221220fe06a2d0182ce5e8f71191f6e7140ac8f613b6ff93dd9c336bbd6bf8df0aaa5064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestPrice(address)": {
        "notice": "Returns the latest price"
      }
    },
    "notice": "For now it supports manual added asset because feed registry (https://docs.chain.link/data-feeds/feed-registry) is not available on testnet. TODO: handle multiple assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3295,
        "contract": "contracts/PriceFeedConsumer.sol:PriceFeedConsumer",
        "label": "priceFeedDai",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 3298,
        "contract": "contracts/PriceFeedConsumer.sol:PriceFeedConsumer",
        "label": "priceFeedLink",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      }
    }
  }
}